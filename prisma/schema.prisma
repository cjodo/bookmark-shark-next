// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
		url      = env("DATABASE_URL")
}

// TODO: Remove nullable on certain fields. They're there to make quick develpment possible.
// fields will be marked REQ if needed in prod

model User {
	id 							Int	@id @default(autoincrement())
		email 				String @unique
		//Required
		username 			String? 	@unique
		passwordHash 	String
		createdAt 		DateTime @default(now())
		googleId			String?
		avatar				String? @default("/placeholder-avatar.png")
		recoveryCode	Bytes?

		totpKey				Bytes?

		emailVerified Boolean @default(false)

		bookmarks 		Bookmark[]
		starred				Star[]

		session   Session? @relation("UserSession")

		emailValidationRequest 	EmailVerificationRequest?	@relation("EmailValidation")
		passwordResetSession		PasswordResetSession?			@relation("PasswordReset")
}

model Session {
	id 				String @id 
		userId		Int @unique
		expiresAt	BigInt

		user    User @relation("UserSession", fields: [userId], references: [id])
}

model Bookmark {
	id   					Int @id @default(autoincrement())
		name 				String @unique
		description String
		resourceUrl String?
		userId 			Int
		createdAt   DateTime @default(now())

		user 				User @relation(fields: [userId], references: [id]) 	
		urls				BookmarkUrl[]
		categories	BookmarkCategory[] 

		stars 		Star[]
}

model Star {
	userId			Int
		bookmarkId 	Int
		createdAt 	DateTime @default(now())

		user  User 				@relation(fields: [userId], references: [id], onDelete: Cascade)
		bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)

		@@id([userId, bookmarkId])
}

model BookmarkUrl {
	id    			Int @id @default(autoincrement())
		bookmarkId 	Int
		url					String
		title				String @default("")

		bookmark 		Bookmark @relation(fields: [bookmarkId], references: [id])

		@@unique([bookmarkId, url])
}

model Category {
	id 						Int @id @default(autoincrement())
		name 					String @unique
		description 	String @default("")
		feature_image String @default("https://placehold.co/600x400")
		slug 					String @unique 

		bookmarks BookmarkCategory[]
}

model BookmarkCategory {
	bookmarkId Int
		categoryId Int 

		bookmark Bookmark @relation(fields: [bookmarkId], references: [id])
		category Category @relation(fields: [categoryId], references: [id])

		@@id([bookmarkId, categoryId])
}

// verification and password reset

model EmailVerificationRequest {
	id 				String 	@id
		userId		Int 	@unique	
		email 		String 
		code 			String
		expiresAt	Int

		user 			User	@relation("EmailValidation", fields: [userId], references: [id])
}

model PasswordResetSession {
	id			String @id 
		userId						Int	@unique
		email							String
		code 							String
		expiresAt					Int
		emailVerified 		Boolean @default(false)
		twoFactorVerified	Boolean @default(false)

		user		User @relation("PasswordReset", fields: [userId], references: [id])
}
